---
export const prerender = false;

import { Image } from "astro:assets";
import {
  urlForPostImage,
  urlForProjectImage,
} from "@/sanity/lib/urlForImage";
import Heading from "@/components/typography/Heading.astro";
import Text from "@/components/typography/Text.astro";
import type { Category } from "@/types/Category";
import Pill from "@/components/misc/Pill.astro";
import FormattedDate from "@/components/misc/FormattedDate.astro";
import Flex from "@/components/layouts/Flex.astro";
import Button from "@/components/buttons/Button.astro";
import EstimatedTimeToRead from "@/components/misc/EstimatedTimeToRead.astro";
import { Icon } from "astro-icon/components";

interface Props {
  title: string;
  mainImage: {
    alt: string;
    asset: {
      _id: string;
      url: string;
    };
  };
  description: string;
  publishedAt: string;
  href: string;
  categories: Category[];
  isProject?: boolean;
  projectUrl?: string;
  githubUrl?: string | null | undefined;
  body?: any;
}

const {
  href,
  title,
  mainImage,
  description,
  publishedAt,
  categories,
  isProject = false,
  projectUrl,
  githubUrl,
  body,
} = Astro.props;
---

<li
  class="dark:bg-card-dark bg-card-light z-10 rounded-xl hover:scale-95 transition-all duration-400 border-[0.5px] hover:border-primary dark:hover:border-primary dark:border-card-dark border-card-light inline-block h-fit"
  transition:animate="fade"
>
  <a
    href={isProject ? `${projectUrl}` : `${href}`}
    target={isProject ? "_blank" : "_self"}
  >
    <Image
      src={isProject
        ? urlForProjectImage(mainImage.asset)
        : urlForPostImage(mainImage.asset)}
      alt={mainImage.alt}
      width={500}
      height={250}
      loading={"eager"}
      class={isProject ? "w-full" : "rounded-t-xl w-full shadow-xl"}
      title={title}
      aria-placeholder="blur"
    />
    <div class="w-full p-4">
      <Heading text={title} size="md" color="text-primary" />
      <div>
        <Flex direction="row" justify="between" align="center">
          <div class="flex items-center">
            {
              isProject && (
                <span class="text-sm text-secondary-white mr-1">ðŸš€ Deployed on</span>
              )
            } 
            <div class="flex items-center">
              {!isProject && <span class="text-secondary-white mr-1"><Icon name="ri:calendar-line" /></span>}<FormattedDate unformattedDate={publishedAt} />
            </div>
          </div>
          { !isProject ? <EstimatedTimeToRead body={body} /> : <></> }
        </Flex>
      </div>
      <div class="border-y-[0.5px] border-secondary-white mt-4 mb-2 py-1">
        <Text text={description} size="md" className="text-sm lg:text-base" />
      {
        isProject && (
          <Flex direction="row" gap="0" wrap="wrap" className="my-2">
              <Button
                text="See Project"
                link={projectUrl}
                variant="primary"
                icon="ri:external-link-line"
                className="mr-4"
                blank
              />
              {githubUrl && (
                <Button
                  text="GitHub"
                  link={githubUrl}
                  variant="secondary"
                  icon="ri:github-fill"
                  blank
                />
              )}
          </Flex>
        )
      }
      </div>
      <ul class="flex flex-wrap w-full pt-2 gap-2">
        {
          categories.map((category: Category) => (
            <Pill text={category.title} variant="secondary" />
          ))
        }
      </ul>
    </div>
  </a>
</li>
